#################################
# The Sun Mixer Module
#
# Part of the SharpeSound Editor
# by Paul D. Sharpe. This module by Robin Whitehead
# A 3rd Year Project at the University of Leeds;
# Department of Electronic and Electrical Engineering.
# Date: 2/6/99

# A collection of procedures and functions that are
# relate to the simple mixer on the Solaris Platform


###################################################################
# SUN_Mixer
# A procedure that initialises, displays and hides the simple
# mixer on Solaris machines.
# There are three possible arguments that can be passed to it
# 1. init - initialises by does not display
# 2. show - packs
# 3. noshow - unpacks
# Date : 2/6/99
proc SUN_Mixer { option } {
    global ConfigSet SUN
    
    if {$option == "init" } {
        if {![winfo exists .mixer]} {
            # Create the widgets
	    frame .mixer
            label .mixer.title
            frame .mixer.play
            frame .mixer.rec
            frame .mixer.play.sliders
            frame .mixer.rec.sliders
            label .mixer.play.title
            label .mixer.rec.title
            frame .mixer.play.sliders.volume
            label .mixer.play.sliders.volume.label
            entry  .mixer.play.sliders.volume.entry
            scale .mixer.play.sliders.volume.scale
            frame .mixer.play.sliders.balance
            label .mixer.play.sliders.balance.label
            entry  .mixer.play.sliders.balance.entry
            scale .mixer.play.sliders.balance.scale
            frame .mixer.rec.sliders.volume
            label .mixer.rec.sliders.volume.label
            entry  .mixer.rec.sliders.volume.entry
            scale .mixer.rec.sliders.volume.scale
            frame .mixer.rec.sliders.balance
            label .mixer.rec.sliders.balance.label
            entry  .mixer.rec.sliders.balance.entry
            scale .mixer.rec.sliders.balance.scale
            frame .mixer.play.ports
            label .mixer.play.ports.title
            checkbutton .mixer.play.ports.head
            checkbutton .mixer.play.ports.speaker
            checkbutton .mixer.play.ports.lineout
            frame .mixer.rec.ports
            label .mixer.rec.ports.title
            checkbutton .mixer.rec.ports.mic
            checkbutton .mixer.rec.ports.linein

	    bind .mixer.play.ports.head <Button-3> {set SUN(Speaker) 0; set SUN(LineOut) 0; PlayPort 0}
	    bind .mixer.play.ports.speaker <Button-3> {set SUN(Head) 0; set SUN(LineOut) 0; PlayPort 1}	
	    bind .mixer.play.ports.lineout <Button-3> {set SUN(Head) 0; set SUN(Speaker) 0; PlayPort 2}	
        }
	.mixer config -bg $ConfigSet(cBG1)\
		     -bd $ConfigSet(BDW)\
		     -relief $ConfigSet(REL)\
		     -height 75
	.mixer.title config -text "SUN Mixer"\
		           -background $ConfigSet(cBG1) \
			   -foreground $ConfigSet(cFG1) \
			   -anchor w\
			   -font $ConfigSet(FNT_S)
	.mixer.play config -bg $ConfigSet(cBG1)\
		          -bd 2\
		          -relief $ConfigSet(REL)\
		          -height 50
        .mixer.rec config -bg $ConfigSet(cBG1)\
		         -bd 2\
		         -relief $ConfigSet(REL)\
		         -height 50	 
	.mixer.play.sliders config -bg $ConfigSet(cBG1)\
		         	  -relief $ConfigSet(REL)\
		         	  -height 50	          		      
	.mixer.rec.sliders config -bg $ConfigSet(cBG1)\
		         	  -relief $ConfigSet(REL)\
		         	  -height 50	 
	.mixer.play.title config -text "Play"\
		                -background $ConfigSet(cBG1) \
			        -foreground $ConfigSet(cFG1) \
			        -anchor w\
			        -font $ConfigSet(FNT_S)	     
	      
	.mixer.rec.title config -text "Record"\
		               -background $ConfigSet(cBG1) \
			       -foreground $ConfigSet(cFG1) \
			       -anchor w\
			       -font $ConfigSet(FNT_S)
	.mixer.play.sliders.volume config -bg $ConfigSet(cBG1)		      
	.mixer.play.sliders.volume.label config\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Volume"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
	.mixer.play.sliders.volume.entry config\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "SUN(PlayLevel)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
	
	.mixer.play.sliders.volume.scale config\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0 -to 255\
			-width 10 -length 200\
			-orient horizontal\
			-command "SUNSetter"\
			-resolution 8
   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   
	if {[info exist SUN(PlayLevel)]} {
		if {$SUN(PlayLevel)==""} { set SUN(PlayLevel) 0 }
		if {$SUN(PlayLevel)==256} {set SUN(PlayLevel) 255}
		.mixer.play.sliders.volume.scale set $SUN(PlayLevel)
        } else {
		set SUN(PlayLevel) [.mixer.play.sliders.volume.scale get]
        }
        
        .mixer.play.sliders.balance config -bg $ConfigSet(cBG1)		      
	.mixer.play.sliders.balance.label config\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Balance"\
			-font $ConfigSet(FNT_S)\
 			-anchor w
	.mixer.play.sliders.balance.entry config\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "SUN(PlayBalanceDisplay)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
	
	.mixer.play.sliders.balance.scale config\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0 -to 64\
			-width 10 -length 200\
			-orient horizontal\
			-command "SUNPlayBalanceSetter"\
			
   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   
	if {[info exist SUN(PlayBalance)]} {
		if {$SUN(PlayBalance)==""} { set SUN(PlayBalance) 0 }
		.mixer.play.sliders.balance.scale set $SUN(PlayBalance)
        } else {
		set SUN(PlayBalance) [.mixer.play.sliders.balance.scale get]
        }
        
        .mixer.rec.sliders.volume config -bg $ConfigSet(cBG1)		      
	.mixer.rec.sliders.volume.label config \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Volume"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
	.mixer.rec.sliders.volume.entry config \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "SUN(RecLevel)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
	
	.mixer.rec.sliders.volume.scale config \
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0 -to 255\
			-width 10 -length 200\
			-orient horizontal\
			-command "SUNRecSetter"\
			-resolution 16
   # Make sure that the value is being disreced and the scale slider
   # is in the correct position.
   
	if {[info exist SUN(RecLevel)]} {
		if {$SUN(RecLevel)==""} { set SUN(RecLevel) 0 }

		.mixer.rec.sliders.volume.scale set $SUN(RecLevel)
        } else {
		set SUN(RecLevel) [.mixer.rec.sliders.volume.scale get]
        }
        
        .mixer.rec.sliders.balance config -bg $ConfigSet(cBG1)		      
	.mixer.rec.sliders.balance.label config \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Balance"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
	.mixer.rec.sliders.balance.entry config \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "SUN(RecBalanceDisplay)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
	
	.mixer.rec.sliders.balance.scale config \
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0 -to 64\
			-width 10 -length 200\
			-orient horizontal\
			-command "SUNRecBalanceSetter"\
			
   # Make sure that the value is being disreced and the scale slider
   # is in the correct position.
   
	if {[info exist SUN(RecBalance)]} {
		if {$SUN(RecBalance)==""} { set SUN(RecBalance) 0 }
		.mixer.rec.sliders.balance.scale set $SUN(RecBalance)
        } else {
		set SUN(RecBalance) [.mixer.rec.sliders.balance.scale get]
        }
      
      
       	.mixer.play.ports config  -bg $ConfigSet(cBG1)\
		         	  -relief $ConfigSet(REL)          		      

	.mixer.play.ports.title config -text "Available Output Ports"\
		                      -background $ConfigSet(cBG1) \
			              -foreground $ConfigSet(cFG1) \
			              -anchor w\
			              -font $ConfigSet(FNT_S)
			       	     
        .mixer.play.ports.head config -foreground $ConfigSet(cFG2) \
					   -background $ConfigSet(cBG2) \
					   -activebackground $ConfigSet(cABG) \
					   -activeforeground $ConfigSet(cAFG) \
				      	   -disabledforeground $ConfigSet(cDFG) \
					   -text Phones\
					   -selectcolor $ConfigSet(cAFG)\
					   -anchor w\
					   -width 8\
					   -variable SUN(Head)\
					   -command "PlayPort 0"\
				           -relief groove
				      			           
        .mixer.play.ports.speaker config -foreground $ConfigSet(cFG2) \
					      -background $ConfigSet(cBG2) \
					      -activebackground $ConfigSet(cABG) \
					      -activeforeground $ConfigSet(cAFG) \
				      	      -disabledforeground $ConfigSet(cDFG) \
					      -text Speaker\
					      -selectcolor $ConfigSet(cAFG)\
					      -anchor w\
					      -width 8\
					      -variable SUN(Speaker)\
					      -command "PlayPort 1"\
				              -relief groove
				              
        .mixer.play.ports.lineout config -foreground $ConfigSet(cFG2) \
					      -background $ConfigSet(cBG2) \
					      -activebackground $ConfigSet(cABG) \
					      -activeforeground $ConfigSet(cAFG) \
				      	      -disabledforeground $ConfigSet(cDFG) \
					      -text "Line Out"\
					      -selectcolor $ConfigSet(cAFG)\
					      -anchor w\
					      -width 9\
					      -variable SUN(LineOut)\
					      -command "PlayPort 2"\
				              -relief groove  
				               
			                  
        .mixer.rec.ports config -bg $ConfigSet(cBG1)\
		         	 -relief $ConfigSet(REL)          		      

	.mixer.rec.ports.title config -text "Available Input Ports"\
		                     -background $ConfigSet(cBG1) \
			             -foreground $ConfigSet(cFG1) \
			             -anchor w\
			             -font $ConfigSet(FNT_S)
			       	     
        .mixer.rec.ports.mic config -foreground $ConfigSet(cFG2) \
				   	 -background $ConfigSet(cBG2) \
				    	 -activebackground $ConfigSet(cABG) \
					 -activeforeground $ConfigSet(cAFG) \
				         -disabledforeground $ConfigSet(cDFG) \
					 -text Microphone\
					 -selectcolor $ConfigSet(cAFG)\
					 -anchor w\
					 -width 14\
					 -variable SUN(Mic)\
					 -command "RecPort 0"\
				         -relief groove
				           
        .mixer.rec.ports.linein config -foreground $ConfigSet(cFG2) \
					    -background $ConfigSet(cBG2) \
					    -activebackground $ConfigSet(cABG) \
					    -activeforeground $ConfigSet(cAFG) \
				      	    -disabledforeground $ConfigSet(cDFG) \
					    -text "Line In"\
					    -selectcolor $ConfigSet(cAFG)\
					    -anchor w\
					    -width 14\
					    -variable SUN(LineIn)\
					    -command "RecPort 1"\
				            -relief groove
	
	pack .mixer.title -fill x -expand true  
	pack .mixer.play.title -fill x -expand true
	pack .mixer.play -fill x -expand true -side left
	pack .mixer.play.sliders -side top -pady 2
	pack .mixer.play.sliders.volume.label -fill x -expand true -anchor w
	pack .mixer.play.sliders.volume.scale\
	     .mixer.play.sliders.volume.entry\
	     -side left -fill x -expand true
	       
	pack .mixer.play.sliders.volume -side top -padx 2
	pack .mixer.play.sliders.balance.label -fill x -expand true -anchor w
	pack .mixer.play.sliders.balance.scale\
	     .mixer.play.sliders.balance.entry\
	     -side left -fill x -expand true
	       
	pack .mixer.play.sliders.balance -side bottom -padx 2 -pady 2
	
	pack .mixer.play.ports -fill x -expand true -side bottom
	pack .mixer.play.ports.title -fill x -expand true -padx 10
	
	pack .mixer.play.ports.head -padx 1 -pady 1 -anchor w -side left	
	pack .mixer.play.ports.speaker -padx 1 -pady 1 -anchor w -side left	
	pack .mixer.play.ports.lineout -padx 1 -pady 1 -anchor w -side left	

	pack .mixer.rec.title -fill x -expand true
	pack .mixer.rec -fill x -expand true -side right
	
	pack .mixer.rec.sliders -side top -pady 2
	pack .mixer.rec.sliders.volume.label -fill x -expand true -anchor w
	pack .mixer.rec.sliders.volume.scale\
	     .mixer.rec.sliders.volume.entry\
	     -side left -fill x -expand true
	       
	pack .mixer.rec.sliders.volume -side top -padx 2
	pack .mixer.rec.sliders.balance.label -fill x -expand true -anchor w
	pack .mixer.rec.sliders.balance.scale\
	     .mixer.rec.sliders.balance.entry\
	     -side left -fill x -expand true
	       
	pack .mixer.rec.sliders.balance -side bottom -padx 2 -pady 2
			
	pack .mixer.rec.ports -fill x -expand true -side bottom
	pack .mixer.rec.ports.title -fill x -expand true -padx 10
	
	pack .mixer.rec.ports.mic -padx 1 -pady 1 -anchor w -side left		
	pack .mixer.rec.ports.linein -padx 1 -pady 1 -anchor w -side left	
   }\
   elseif {[winfo exists .mixer]} {
	# The Show option.
	if {$option == "show"} { 
	   	global PACK
		if {$PACK(Mixer) != ""} {
	  	 pack .mixer -fill x -after $PACK(Mixer)
		} else {
	  		pack .infobar -fill x 
		}

	# The No Show option.
 	}\
	elseif {$option == "noshow" } { 
		pack forget .mixer
	}\
 	else { 
		puts "Error in MenuBar: illegal option." 
	}
   }\
   else { puts "Sound Studio: proc MenuBar: 'init' option must be called first!"}



}

###################################################################
# RecPort
# The Callback procedure to a change of the input port checkbutton
# Date : 2/6/99
proc RecPort { value } {
	global SUN
	
	if {$value == 0} {
		set SUN(LineIn) 0
		if {$SUN(Mic) == 0} {set SUN(Mic) 1}
	}
	if {$value == 1} {
		set SUN(Mic) 0
		if {$SUN(LineIn) == 0} {set SUN(LineIn) 1}
	}
	set recport [expr ($SUN(LineIn) * 2) + $SUN(Mic)]
	puts $SUN(PipeId) RP$recport
	
	#puts "setting record port as $recport"
	
}

###################################################################
# PlayPort
# The Callback procedure to a change of the output port checkbutton
# Date : 2/6/99
proc PlayPort { value } {
	global SUN
	
	if {!$SUN(LineOut) && !$SUN(Head) && !$SUN(Speaker)} {
		if {$value == 0} {set SUN(Head) 1}
		if {$value == 1} {set SUN(Speaker) 1}
		if {$value == 2} {set SUN(LineOut) 1}
	}
	set playport [expr ($SUN(Head) * 2) + $SUN(Speaker) + ($SUN(LineOut) * 4)]
	puts $SUN(PipeId) PP$playport
	
	#puts "set play port as $playport"
}
###################################################################
# SUNSetter
# The Callback procedure to a change of the output volume level
# Date : 2/6/99
proc SUNSetter { value } {
	global SUN
	
	set SUN(PlayLevel) $value
	if {$SUN(PlayLevel)==256} {set SUN(PlayLevel) 255}
	puts $SUN(PipeId) PL$SUN(PlayLevel) 
	
	#puts "Play Level $SUN(PlayLevel)"
}
###################################################################
# SUNRecSetter
# The Callback procedure to a change of the input volume level
# Date : 2/6/99
proc SUNRecSetter { value } {
	global SUN
	
	set SUN(RecLevel) $value
	if {$SUN(RecLevel) > 15} {set SUN(RecLevel) [expr $SUN(RecLevel) - 1]}
	puts $SUN(PipeId) RL$SUN(RecLevel)
	
	#puts "Record Level $SUN(RecLevel)"
}
###################################################################
# SUNPlayBalanceSetter
# The Callback procedure to a change of the input balance level
# Date : 2/6/99
proc SUNPlayBalanceSetter { value } {
	global SUN
	
	set SUN(PlayBalance) $value
	if {$value == 32} {set SUN(PlayBalanceDisplay) 0}
	if {$value < 32} {set SUN(PlayBalanceDisplay) L[expr 32 - $value]}
	if {$value > 32} {set SUN(PlayBalanceDisplay) R[expr $value - 32]}
	puts $SUN(PipeId) PB$SUN(PlayBalance)
	
	#puts "play balance $SUN(PlayBalance)"
}
###################################################################
# SUNPlayBalanceSetter
# The Callback procedure to a change of the output balance level
# Date : 2/6/99
proc SUNRecBalanceSetter { value } {
	global SUN
	
	set SUN(RecBalance) $value
	if {$value == 32} {set SUN(RecBalanceDisplay) 0}
	if {$value < 32} {set SUN(RecBalanceDisplay) L[expr 32 - $value]}
	if {$value > 32} {set SUN(RecBalanceDisplay) R[expr $value - 32]}
	puts $SUN(PipeId) RB$SUN(RecBalance)
	
	#puts "record balance $SUN(RecBalance)"
}
###################################################################
# SUNGetMixInfo
# A procedure that probes the soundcard to get current level/port
# information.
# Date : 2/6/99
proc SUN_GetMixInfo {} {
	global SUN FILE
	
	set temp [exec $FILE(SRC)/SUN_Card_Details]
	set playinfo [lindex [split $temp !] 1]
	set recinfo [lindex [split $temp !] 2]
	
	set SUN(PlayLevel) [lindex $playinfo 0]
	set SUN(PlayBalance) [lindex $playinfo 1]
	set playports [lindex $playinfo 2]
	
	if {$playports == 1} {
		set SUN(Head) 0
		set SUN(Speaker) 1
		set SUN(LineOut) 0
	}
	if {$playports == 2} {
		set SUN(Head) 1
		set SUN(Speaker) 0
		set SUN(LineOut) 0
	}
	if {$playports == 3} {
		set SUN(Head) 1
		set SUN(Speaker) 1
		set SUN(LineOut) 0	
	}
	if {$playports == 4} {
		set SUN(Head) 0
		set SUN(Speaker) 0
		set SUN(LineOut) 1	
	}
	if {$playports == 5} {
		set SUN(Head) 0
		set SUN(Speaker) 1
		set SUN(LineOut) 1	
	}
	if {$playports == 6} {
		set SUN(Head) 1
		set SUN(Speaker) 0
		set SUN(LineOut) 1	
	}
	if {$playports == 7} {
		set SUN(Head) 1
		set SUN(Speaker) 1
		set SUN(LineOut) 1	
	}
	set SUN(RecLevel) [lindex $recinfo 0]
	set SUN(RecBalance) [lindex $recinfo 1]
	SUNPlayBalanceSetter $SUN(PlayBalance)
	SUNRecBalanceSetter $SUN(RecBalance)
	set recports [lindex $recinfo 2]
	
	if {$recports == 1} {
		set SUN(Mic) 1
		set SUN(LineIn) 0
	}
	if {$recports == 2} {
		set SUN(Mic) 0
		set SUN(LineIn) 1
	}

	
}
###################################################################
# SUNSetSliders
# A procedure that sets the position of the sliders to be the values
# of the corresponding variables
# Date : 2/6/99
proc SUN_SetSliders {} {
	global SUN
	
	.mixer.play.sliders.volume.scale set $SUN(PlayLevel)
	.mixer.play.sliders.balance.scale set $SUN(PlayBalance)
	.mixer.rec.sliders.volume.scale set $SUN(RecLevel)
	.mixer.rec.sliders.balance.scale set $SUN(RecBalance)
}