#################################
# The Plot Module
#
# Part of the SharpeSound Editor
# by Paul D. Sharpe
# A 3rd Year Project at the University of Leeds;
# Department of Electronic and Electrical Engineering.
# Date: 27/2/95
#
# Revision:2 Added zoomin and zoomout buttons and icons.  NJB
# Revision:1 for Tk4.0
# 
# Date:  12 July 1999
set PLOT(Startx) 0
set PLOT(Endx) 0
set PLOT(Zoom0) "0 0 0 0"

##########################
# plotbox - Is the procedure that ...
# There are 6 options.
# 1. init : this sets up   but doesn't display them.
# 2. show : this packs.
# 3. noshow this unpacks.
# 4. disabled : this disables all the buttons.
# 5. normal : re-enables all the buttons.
# 6. reset : redraws the window; useful if color settings have been changed
proc PlotBox { option } {

  #++++++++++++++++++++++
  # Get User Settings
  global ConfigSet
  global Menu_anc PLOT FILE
  set PLOT(Height) 200

  if {$option == "init" } {
if {![winfo exists .plotbox]} {
	frame .plotbox
	label .plotbox.title -text Plot
	frame .plotbox.cs
	canvas .plotbox.cs.canvas
#	scrollbar .plotbox.cs.scroll -orient horizontal\
				-command ".plotbox.cs.canvas xview"
	scrollbar .plotbox.cs.scroll -orient horizontal\
				-command {scroll_it}
	.plotbox.cs.canvas configure -xscrollcommand {.plotbox.cs.scroll set}
	frame .plotbox.cs.marker
	frame .plotbox.cs.marker.start
	label .plotbox.cs.marker.start.label -text "First Marker Time"
	label .plotbox.cs.marker.start.data -textvariable PLOT(Start)	
	label .plotbox.cs.marker.start.wintimelabel -text "Window Start Time"
	label .plotbox.cs.marker.start.wintimedata -textvariable PLOT(WStart)	
#	pack 	.plotbox.cs.marker.start.wintimedata\
		.plotbox.cs.marker.start.data\
		-side top -fill x -expand 1
#	pack 	.plotbox.cs.marker.start.wintimelabel\
		.plotbox.cs.marker.start.label\
		-side left -fill x -expand 1
	pack 	.plotbox.cs.marker.start.wintimedata\
		.plotbox.cs.marker.start.wintimelabel\
		-side top -fill x -expand 1
	pack 	.plotbox.cs.marker.start.data\
		.plotbox.cs.marker.start.label\
		-side top -fill x -expand 1
	frame .plotbox.cs.marker.end
 	label .plotbox.cs.marker.end.label -text "Second Marker Time"
	label .plotbox.cs.marker.end.data -textvariable PLOT(End)
	label .plotbox.cs.marker.end.wintimelabel -text "Window End Time"
	label .plotbox.cs.marker.end.wintimedata -textvariable PLOT(WEnd)	
	pack 	.plotbox.cs.marker.end.wintimedata\
		.plotbox.cs.marker.end.wintimelabel\
		-side top -fill x -expand 1
	pack 	.plotbox.cs.marker.end.data\
		.plotbox.cs.marker.end.label\
		-side top -fill x -expand 1

	frame .plotbox.cs.marker.zoom
 	label .plotbox.cs.marker.zoom.label -text "Cursor Position Time"
	label .plotbox.cs.marker.zoom.data -textvariable PLOT(CursorTime)
	pack 	.plotbox.cs.marker.zoom.data\
		.plotbox.cs.marker.zoom.label\
		-side top -fill x -expand 1
        button .plotbox.cs.marker.zoom.zoomin \
                -bitmap @$FILE(SRC)\/zoomin.ico\
                -command {scrollcb {1}}
        button .plotbox.cs.marker.zoom.zoomout \
                -bitmap @$FILE(SRC)\/zoomout.ico\
                -command {scrollcb {-1}}
	# Callback for zooming (used to be a scrollbar 8-)
	proc scrollcb {value} {
		global PLOT
		if {$value==1} {Zoom up}\
		elseif {$value==-1} {Zoom down}
	}
	label .plotbox.cs.marker.zoom.level\
			-textvariable PLOT(ZoomCount)
	pack .plotbox.cs.marker.zoom.zoomout\
	     .plotbox.cs.marker.zoom.level\
             .plotbox.cs.marker.zoom.zoomin\
		-pady 1 -side left -fill x
		
        frame .plotbox.cs.marker.mag -background $ConfigSet(cBG1)

        menubutton .plotbox.cs.marker.mag.b \
	      -font $ConfigSet(FNT_L)\
              -menu .plotbox.cs.marker.mag.b.choices \
              -text "View 1/1"
        menu .plotbox.cs.marker.mag.b.choices \
	      -font $ConfigSet(FNT_L)
        for {set i 32} {$i >= 1} {set i [expr $i/2]} {
	  .plotbox.cs.marker.mag.b.choices add command          \
	      -label 1/$i \
	      -command ".plotbox.cs.marker.mag.b config -text \"View 1/$i\"
                        setPlotMag $i"
	}


        pack    .plotbox.cs.marker.mag.b -side top -fill y -expand 0

	pack 	.plotbox.cs.marker.start\
		.plotbox.cs.marker.zoom\
                .plotbox.cs.marker.mag\
		.plotbox.cs.marker.end\
		-expand 1 -padx 5 -side left -fill both -expand 1

	pack 	.plotbox.cs.canvas \
		.plotbox.cs.scroll \
		 -fill both -expand 1

	pack .plotbox.cs.marker -pady 2 -expand 1


	pack .plotbox.title -fill x -expand 1
	pack .plotbox.cs -padx 10


	bind .plotbox.cs.canvas <Motion> {
		set cursorpos [expr round([.plotbox.cs.canvas canvasx %x])]
                set cursorpos [expr (($cursorpos*$PLOT(Blocksize))+$PLOT(Offset))/$LOAD(rate).0]
                set PLOT(CursorTime) [Sec2Time $cursorpos]
#                puts $cursorpos
	}


	# Bindings for Canvas
	# Button 1: start marking a block
	bind .plotbox.cs.canvas <Button-1> { 
		global PLOT
		set PLOT(Startx) [expr round([.plotbox.cs.canvas canvasx %x])]
		if {$PLOT(Startx)>$PLOT(Total)} { set PLOT(Startx) $PLOT(Total)}
	        if {$PLOT(Startx)<0} {set PLOT(Startx) 0}
		set PLOT(Endx) $PLOT(Startx)
		#reset marked area
		MarkPlot
		if {[info exists PLOT(MarkBox)] } {.plotbox.cs.canvas raise $PLOT(MarkBox) graph}
	set FLAG(Marked) 0
	}

	# Button 1 motion mark an area
	bind .plotbox.cs.canvas <B1-Motion> {
 
		# if mouse is dragged beyound the limits of the visual canvas
		# continue marking  into rest of canvas.

		# Right limit.
		if {%x > 400 } {
		  .plotbox.cs.canvas scan mark %x %y
		  .plotbox.cs.canvas scan dragto [expr %x-10] 0
		} 
		# Left limit.
		if {%x < 0 } {
		  .plotbox.cs.canvas scan mark %x %y
		  .plotbox.cs.canvas scan dragto [expr %x+10] 0
		}

		# Set the end marker
		set PLOT(Endx) [expr round([.plotbox.cs.canvas canvasx %x])]
		if {$PLOT(Endx)>$PLOT(Total)} { set PLOT(Endx) $PLOT(Total)}
		if {$PLOT(Endx)<0} {set PLOT(Endx) 0}
		# Mark the area.	
		MarkPlot
		if {[info exists PLOT(MarkBox)] } {.plotbox.cs.canvas lower $PLOT(MarkBox) graph}
			set FLAG(Marked) 1
	}

        # Procedure to adjust markers

        proc adjplot {x} {
	  global PLOT FLAG
	  # get the current mouse position
	  set mousepos [expr round([.plotbox.cs.canvas canvasx $x])]
	  # Decide whether to adjust the beginning or end pointer
	  if {[expr abs($PLOT(Endx)-$mousepos)] <= \
	    [expr abs($PLOT(Startx)-$mousepos)]} {
	    set which Endx
	  } else {
	    set which Startx
	  }
	  set PLOT($which) $mousepos
	  if {$PLOT($which)>$PLOT(Total)} { set PLOT($which) $PLOT(Total)}
	  if {$PLOT($which)<0} { set PLOT($which) 0 }
	  # Mark the area.
	  MarkPlot
	  if {[info exists PLOT(MarkBox)] } {
	    .plotbox.cs.canvas lower $PLOT(MarkBox) graph
	  }
	  set FLAG(Marked) 1
	}

	# Button 2 : adjust marked area up to pointer
        bind .plotbox.cs.canvas <Button-2>  { adjplot %x }
        bind .plotbox.cs.canvas <B2-Motion> { 
	  if {%x > 400 } {
	    .plotbox.cs.canvas scan mark %x %y
	    .plotbox.cs.canvas scan dragto [expr %x-10] 0
	  } 
	  # Left limit.
	  if {%x < 0 } {
	    .plotbox.cs.canvas scan mark %x %y
	    .plotbox.cs.canvas scan dragto [expr %x+10] 0
	  }
	  adjplot %x
	}
  
	# Button 3: Drag the canvas view.
#	bind .plotbox.cs.canvas <Button-3> { .plotbox.cs.canvas scan mark %x %y }
#	bind .plotbox.cs.canvas <B3-Motion> { .plotbox.cs.canvas scan dragto %x %y }

	# Button 3: Ende Markieren.
	bind .plotbox.cs.canvas <Button-3> {
 
		# Set the end marker
		set PLOT(Endx) [expr round([.plotbox.cs.canvas canvasx %x])]
		if {$PLOT(Endx)>$PLOT(Total)} { set PLOT(Endx) $PLOT(Total)}
		if {$PLOT(Endx)<0} {set PLOT(Endx) 0}
		# Mark the area.	
		MarkPlot
		if {[info exists PLOT(MarkBox)] } {.plotbox.cs.canvas lower $PLOT(MarkBox) graph}
			set FLAG(Marked) 1
	}


}


	# Configure Widgets
	.plotbox config -background $ConfigSet(cBG1)\
			-relief $ConfigSet(REL) -bd $ConfigSet(BDW)
	.plotbox.title config \
			-background $ConfigSet(cBG1) \
			-foreground $ConfigSet(cFG1) \
			-anchor w\
			-font $ConfigSet(FNT_S)	
	.plotbox.cs config	-background $ConfigSet(cBG1)
	.plotbox.cs.canvas config -background $ConfigSet(cBG3)\
				-width $PLOT(Width)\
				-height $PLOT(Height)\
				-relief sunken\
				-cursor crosshair
	.plotbox.cs.scroll config -background $ConfigSet(cBG1) \
				-activebackground $ConfigSet(cABG)
	.plotbox.cs.marker config -background $ConfigSet(cBG1) -bd 2
	.plotbox.cs.marker.start config -background $ConfigSet(cBG1) 
	.plotbox.cs.marker.start.label config\
			-background $ConfigSet(cBG1) \
			-foreground $ConfigSet(cFG1) \
			-anchor w\
			-font $ConfigSet(FNT_S)
	.plotbox.cs.marker.start.wintimelabel config\
			-background $ConfigSet(cBG1) \
			-foreground $ConfigSet(cFG1) \
			-anchor w\
			-font $ConfigSet(FNT_S)
	.plotbox.cs.marker.start.data config\
			-background $ConfigSet(cBG2) \
			-foreground $ConfigSet(cFG2) \
			-anchor c\
			-font $ConfigSet(FNT_L)\
			-width 15\
			-relief groove
	.plotbox.cs.marker.start.wintimedata config\
			-background $ConfigSet(cBG2) \
			-foreground $ConfigSet(cFG2) \
			-anchor c\
			-font $ConfigSet(FNT_L)\
			-width 15\
			-relief groove
	.plotbox.cs.marker.end config -background $ConfigSet(cBG1) 
 	.plotbox.cs.marker.end.label config\
			-background $ConfigSet(cBG1) \
			-foreground $ConfigSet(cFG1) \
			-anchor e\
			-font $ConfigSet(FNT_S)
	.plotbox.cs.marker.end.data config\
			-background $ConfigSet(cBG2) \
			-foreground $ConfigSet(cFG2) \
			-anchor c\
			-font $ConfigSet(FNT_L)\
			-width 15\
			-relief groove
 	.plotbox.cs.marker.end.wintimelabel config\
			-background $ConfigSet(cBG1) \
			-foreground $ConfigSet(cFG1) \
			-anchor e\
			-font $ConfigSet(FNT_S)
	.plotbox.cs.marker.end.wintimedata config\
			-background $ConfigSet(cBG2) \
			-foreground $ConfigSet(cFG2) \
			-anchor c\
			-font $ConfigSet(FNT_L)\
			-width 15\
			-relief groove

	.plotbox.cs.marker.zoom config -background $ConfigSet(cBG1) 
 	.plotbox.cs.marker.zoom.label config\
			-background $ConfigSet(cBG1) \
			-foreground $ConfigSet(cFG1) \
			-anchor e\
			-font $ConfigSet(FNT_S)
	.plotbox.cs.marker.zoom.data config\
			-background $ConfigSet(cBG2) \
			-foreground $ConfigSet(cFG2) \
			-anchor c\
			-font $ConfigSet(FNT_L)\
			-width 15\
			-relief groove
        .plotbox.cs.marker.zoom.zoomin config\
	      -background $ConfigSet(cBG2) -foreground $ConfigSet(cFG2)\
	      -activebackground $ConfigSet(cABG)		\
	      -activeforeground $ConfigSet(cAFG)
        .plotbox.cs.marker.zoom.zoomout config\
	      -background $ConfigSet(cBG2) -foreground $ConfigSet(cFG2)\
	      -activebackground $ConfigSet(cABG)		\
	      -activeforeground $ConfigSet(cAFG)
	.plotbox.cs.marker.mag config -background $ConfigSet(cBG1)
        .plotbox.cs.marker.mag.b config \
	      -background $ConfigSet(cBG1) -foreground $ConfigSet(cFG1)\
	      -activebackground $ConfigSet(cABG)		\
	      -activeforeground $ConfigSet(cAFG)		\
	      -disabledforeground $ConfigSet(cDFG)
        .plotbox.cs.marker.mag.b.choices config \
	      -background $ConfigSet(cBG1) -foreground $ConfigSet(cFG1)\
	      -activebackground $ConfigSet(cABG)		\
	      -activeforeground $ConfigSet(cAFG)		\
	      -disabledforeground $ConfigSet(cDFG)		\
	      -selectcolor $ConfigSet(cAFG)
        .plotbox.cs.marker.zoom.level config \
	      -background $ConfigSet(cBG1) \
	      -foreground $ConfigSet(cFG1)
              
  }\
elseif {[winfo exists .plotbox]} {
	if {$option == "show"} {
	global PACK
	if {$PACK(PlotBox) != ""} {	
	 pack .plotbox -fill x -expand 1 -after $PACK(PlotBox)
	} else {
	 pack .plotbox -fill x -expand 1 -after
	}
	}\
	elseif {$option == "disabled" || $option=="normal"} { }\
	elseif {$option == "noshow" } { pack forget .plotbox} \
  	elseif {$option == "init"} {# A try to use init again;Ignore This case} \
 	elseif {$option == "reset"} {
		set packflag [llength [pack info .plotbox]]
		destroy .plotbox
		# DEBUG LINE
		source $FILE(SRC)/menu.tk
		PlotBox init
		if {$packflag} {PlotBox show}
	}
}
}

proc MarkPlot {} {
  global PLOT ConfigSet LOAD
  if {[info exists PLOT(MarkBox)] } {
	.plotbox.cs.canvas coord $PLOT(MarkBox) $PLOT(Startx) 0 $PLOT(Endx) $PLOT(Height)
	.plotbox.cs.canvas itemconfigure m1 -fill $ConfigSet(cFG3)
	.plotbox.cs.canvas dtag m1
	.plotbox.cs.canvas addtag m1 enclosed $PLOT(Startx) 0 $PLOT(Endx) $PLOT(Height)
	.plotbox.cs.canvas itemconfigure m1 -fill $ConfigSet(cFG2)
	set PLOT(Start) [expr (($PLOT(Startx)*$PLOT(Blocksize))+$PLOT(Offset))/$LOAD(rate).0]
	set PLOT(End) [expr ( ($PLOT(Endx)*$PLOT(Blocksize))+$PLOT(Offset))/$LOAD(rate).0]
	# And now formatted
	set PLOT(Start) [Sec2Time $PLOT(Start)]
	set PLOT(End) [Sec2Time $PLOT(End)]
  }

}

proc FillPlot {  {blocksize init} { opt default}} {
global PLOT ConfigSet SAMPLE FILE LOAD LINE

catch {.plotbox.cs.canvas delete $LINE(Id)}

if {$opt=="default"} {
	set file $FILE(TMP1)
} else { set file $opt }
set mask [expr (($LOAD(bit)>>4)<<1) + ($LOAD(chnl)>>1) ]


# set PLOT(ViewWinLeft) [expr round([.plotbox.cs.canvas canvasx 0])]
# set PLOT(ViewWinLeft) 0


# Set an initial block size based on the number of samples 
if {$blocksize=="init"} {
	   set maxmin [exec $FILE(SRC)/maxmin 10000 $mask $file] 
	   set length [join [lindex $maxmin 1]]
           set bytes [GetWordSize]
	   set PLOT(Total) [expr ($PLOT(Width)-5)]
#           set PLOT(Blocksize) \
               [expr $bytes*round(($length/$PLOT(Width).0)/$bytes)]
           set PLOT(Blocksize) [expr round($length/$PLOT(Width).0)]
	   if {$opt=="default"} {
	     set PLOT(MaxBlockSize) $PLOT(Blocksize)
	     set PLOT(Zoom0) "$PLOT(Blocksize) 0 0 0"
	     set PLOT(Offset) 0 
	     set SAMPLE(Size) $length
	     # Update InfoBar
	     InfoFill	
	     Zoom init
	   }
	   set PLOT(WStart) [expr (($PLOT(ViewWinLeft)*$PLOT(Blocksize))+$PLOT(Offset))/$LOAD(rate).0]
	   set PLOT(WEnd) [expr ((($PLOT(ViewWinLeft)+$PLOT(Width))*$PLOT(Blocksize))+$PLOT(Offset))/$LOAD(rate).0]
	   # And now formatted
	   set PLOT(WStart) [Sec2Time $PLOT(WStart)]
	   set PLOT(WEnd) [Sec2Time $PLOT(WEnd)]
} elseif {$blocksize=="delete"} {
	# Delete complete contents 
	.plotbox.cs.canvas delete all
	catch {unset PLOT(MarkBox)}
	set PLOT(Startx)		0
	set PLOT(Endx)			0
        set PLOT(WStart) [Sec2Time 0]
	set PLOT(WEnd)   [Sec2Time 0]
	set PLOT(Start) 	[Sec2Time 0]
	set PLOT(End) 		[Sec2Time 0]
	set PLOT(Total)		$PLOT(Width)
	set PLOT(Blocksize)		0
	set PLOT(Scale)                 1
	return
} \
else {
	set PLOT(Blocksize) $blocksize
	set PLOT(WStart) [expr (($PLOT(ViewWinLeft)*$PLOT(Blocksize))+$PLOT(Offset))/$LOAD(rate).0]
	set PLOT(WEnd) [expr ((($PLOT(ViewWinLeft)+$PLOT(Width))*$PLOT(Blocksize))+$PLOT(Offset))/$LOAD(rate).0]
	# And now formatted
	set PLOT(WStart) [Sec2Time $PLOT(WStart)]
	set PLOT(WEnd) [Sec2Time $PLOT(WEnd)]
}


if {$LOAD(chnl)==2} {

# Get points with new blocksize

if {$PLOT(Blocksize)>0} {
  set maxmin [exec $FILE(SRC)/maxminstereo [expr int(round($PLOT(Blocksize)))] \
					  $mask $file]
set PLOT(Points) [lindex $maxmin 0]
} else {FillPlot delete; return}


set i 0
# Delete any previous plot 
.plotbox.cs.canvas delete graph

# Plot the points
set count 0
foreach point $PLOT(Points) {
incr count
# get from normalised values to Canvas coordinates
set minleft [expr round( [lindex $point 0] *($PLOT(Height)/2))]
set maxleft [expr round( [lindex $point 1] *($PLOT(Height)/2))]
set minright [expr round( [lindex $point 2] *($PLOT(Height)/2)+$PLOT(Height)/2)]
set maxright [expr round( [lindex $point 3] *($PLOT(Height)/2)+$PLOT(Height)/2)]

# Ensure that a dot is placed
if {$minleft==$maxleft} { incr maxleft}
if {$minright==$maxright} { incr maxright}
.plotbox.cs.canvas create line $i $minleft $i $maxleft -tags graph -fill $ConfigSet(cFG3)
.plotbox.cs.canvas create line $i $minright $i $maxright -tags graph -fill $ConfigSet(cFG3)

incr i

}

set mitte [expr round($PLOT(Height)/2)]
.plotbox.cs.canvas create line 0 $mitte $PLOT(Width) $mitte -tags graph -fill $ConfigSet(cFG3)
	

} else {
	
if {$PLOT(Blocksize)>0} {
  set maxmin [exec $FILE(SRC)/maxmin [expr int(round($PLOT(Blocksize)))] \
					  $mask $file]
set PLOT(Points) [lindex $maxmin 0]
} else {FillPlot delete; return}


set i 0
# Delete any previous plot 
.plotbox.cs.canvas delete graph

# Plot the points
set count 0
foreach point $PLOT(Points) {
incr count
# get from normalised values to Canvas coordinates
set min [expr round( [lindex $point 0] *($PLOT(Height)))]
set max [expr round( [lindex $point 1] *($PLOT(Height)))]

# Ensure that a dot is placed
if {$min==$max} { incr max}
.plotbox.cs.canvas create line $i $min $i $max -tags graph -fill $ConfigSet(cFG3)

incr i

}
	
}


# Set the total lines drawn
set PLOT(Total) $count

# Set the marking area
if {[info exists PLOT(MarkBox)]} { 
	MarkPlot
} else {
    # Configure marking area
    set PLOT(MarkBox) [.plotbox.cs.canvas create rectangle 0 0 0 $PLOT(Height) \
		-fill $ConfigSet(cFG3) -outline $ConfigSet(cFG2) ]
    set PLOT(Startx) 0
    set PLOT(Endx) 0
    MarkPlot
}

# Put Marking Box below the graph
.plotbox.cs.canvas lower $PLOT(MarkBox) graph 
# Set the canvas range
.plotbox.cs.canvas configure -scrollregion " 0 0 $PLOT(Total) $PLOT(Height) "

# Remove numerical data from memory
unset PLOT(Points)
if {[info exists LINE(Id)] == 1} {
	.plotbox.cs.canvas move $LINE(Id) -1 0
}
set LINE(Id) [.plotbox.cs.canvas create line 0 0 0 $PLOT(Height) -width 1 -fill red -tag moveable]
}


#############################
#
# setPlotMag
#
# Sets up the PLOT parameters depending upon then newly
# selected magnification.  Also changed the button label as
# appropriate.
#
# NJB 3rd March 1998

proc setPlotMag {factor} {
  global PLOT FLAG FILE LINE

  # Magnification of the canvas will be confused by the line being there

  .plotbox.cs.canvas delete $LINE(Id)

  set magfac [expr $factor.0/$PLOT(Magnification)]
  set PLOT(Width) [expr 500*$factor]
  set PLOT(Magnification) $factor

  # Adjust the start and end point markers, because the plot width
  # (and hence blocksize) will change.

  set PLOT(Startx) [expr round ($PLOT(Startx)*$magfac)]
  set PLOT(Endx)   [expr round ($PLOT(Endx)*$magfac)]
  set PLOT(Blocksize) [expr round ($PLOT(Blocksize)/$magfac)]

  # And all of the stacked contexts will change too.

  for {set i 0} {$i <= $PLOT(ZoomCount)} {incr i} {
    set Blocksize     [expr round([lindex $PLOT(Zoom$i) 0]/$magfac)]
    set Offset        [lindex $PLOT(Zoom$i) 1]
    set Startx        [expr round([lindex $PLOT(Zoom$i) 2]*$magfac)]
    set Endx          [expr round([lindex $PLOT(Zoom$i) 3]*$magfac)]
    set PLOT(Zoom$i) "$Blocksize $Offset $Startx $Endx"
  }

  if {$FLAG(Loaded)} {
    if {$PLOT(ZoomCount)} {
      # Update the editing plot with the contents of the temporary file.
      FillPlot init $FILE(TMP5)
    } else {
      # Update the editing plot with the whole sample.
      FillPlot
    }
  }

}


proc scroll_it args {
   global PLOT LOAD
	
   set j 0
   foreach i $args {set argum($j) $i
                    incr j}

   if ($j==2) {
      .plotbox.cs.canvas xview $argum(0) $argum(1)
   }
	
   if ($j==3) {
      .plotbox.cs.canvas xview $argum(0) $argum(1) $argum(2)
   }

   set PLOT(ViewWinLeft) [expr round([.plotbox.cs.canvas canvasx 1])]
	
   set PLOT(WStart) [expr (($PLOT(ViewWinLeft)*$PLOT(Blocksize))+$PLOT(Offset))/$LOAD(rate).0]
   set PLOT(WEnd) [expr ((($PLOT(ViewWinLeft)+$PLOT(Width)/$PLOT(Magnification))*$PLOT(Blocksize))+$PLOT(Offset))/$LOAD(rate).0]
   # And now formatted
   set PLOT(WStart) [Sec2Time $PLOT(WStart)]
   set PLOT(WEnd) [Sec2Time $PLOT(WEnd)]

}
