###################################################################
# sReverb
# This procedure is the callback to the Effects-Reverb menu item and 
# a button-3 click on the Reverb checkbutton in the effect bar.
# It creates a dialog box to set the parameters for the Reverb effect.
proc sReverb {} {
   global ConfigSet FX

   # Create the dialog box.
	
   # Create toplevel window.
   toplevel .rev -bg $ConfigSet(cBG1)
   wm title .rev "Reverb Settings"
   # Set window as a pop-up child of the root window.
   wm transient .rev .
   # Stop entry from the main window. (grab).
   catch { grab .rev }

   # Create Widgets
   # Create the general frame.	   
   frame .rev.main -bg $ConfigSet(cBG1)\
			-bd 2 -relief $ConfigSet(REL)

   # Create the set frame to contain the scale widgets.
   frame .rev.main.set -bg $ConfigSet(cBG1)  

   # Create another set frame to contain gain out slider
   frame .rev.main.set2 -bg $ConfigSet(cBG1)

   # Create the revtime scale widget. 
   frame .rev.main.set.revtime -bg $ConfigSet(cBG1)
   label .rev.main.set.revtime.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Reverb Time (ms)"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
   entry .rev.main.set.revtime.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(ReverbTime)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .rev.main.set.revtime .rev.main.done.butt
		 
   scale .rev.main.set.revtime.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0 -to 2000\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(ReverbTime)"

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(ReverbTime)]} {
		if {$FX(ReverbTime)==""} { set FX(ReverbTime) 0 }
		.rev.main.set.revtime.scale set $FX(ReverbTime)
   } else {
	set FX(ReverbTime) [.rev.main.set.revtime.scale get]
   }
   pack .rev.main.set.revtime.instr -fill x -expand 1\
					-anchor w
   pack .rev.main.set.revtime.scale\
	.rev.main.set.revtime.label \
	  -side left -fill x -expand 1 

   # Create the delay scale widget.
   frame .rev.main.set.delay -bg $ConfigSet(cBG1)
   label .rev.main.set.delay.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Reverb Delay (ms)"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
    entry .rev.main.set.delay.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(ReverbDelay)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .rev.main.set.delay .rev.main.done.butt
		 
   scale .rev.main.set.delay.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0 -to 1500\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(ReverbDelay)"

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(ReverbDelay)]} { 
		if {$FX(ReverbDelay)==""} { set FX(ReverbDelay) 0 }
		.rev.main.set.delay.scale set $FX(ReverbDelay)
   } else {
	set FX(ReverbDelay) [.rev.main.set.delay.scale get]
   }

   pack .rev.main.set.delay.instr -fill x -expand 1\
					-anchor w
   pack .rev.main.set.delay.scale\
	.rev.main.set.delay.label \
	  -side left -fill x -expand 1



   # Create the gainout scale widget.
 
   frame .rev.main.set2.gainout -bg $ConfigSet(cBG1)

   label .rev.main.set2.gainout.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Gain of Output Signal"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
   entry .rev.main.set2.gainout.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(ReverbGainOut)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .rev.main.set2.gainout .rev.main2.done.butt
		 
   scale .rev.main.set2.gainout.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0.01 -to 1\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(ReverbGainOut)"\
			-resolution 0.01

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(ReverbGainOut)]} {
		if {$FX(ReverbGainOut)==""} { set FX(ReverbGainOut) 0 }
		.rev.main.set2.gainout.scale set $FX(ReverbGainOut)
   } else {
	set FX(ReverbGainOut) [.rev.main.set2.gainout.scale get]
   }
   pack .rev.main.set2.gainout.instr -fill x -expand 1\
					-anchor w
   pack .rev.main.set2.gainout.scale\
	.rev.main.set2.gainout.label\
	  -side left -fill x -expand 1 





   # Pack the scale widgets.
   pack .rev.main.set.revtime\
	.rev.main.set.delay\
	-expand 1 -padx 5m -pady 3m -side left
   pack .rev.main.set2.gainout\
	-expand 1 -padx 5m -pady 3m -side left
	
   # Create the label for the main window.
   label .rev.main.label  \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Set the Reverb Parameters:  (For realistic effect Delay should be between 1/4 - 1/2 of Time)"\
			-font $ConfigSet(FNT_S) \
 			-anchor w

   # Create the Select checkbutton.
   checkbutton .rev.main.apply \
			-foreground $ConfigSet(cFG2) \
			-background $ConfigSet(cBG2) \
			-activebackground $ConfigSet(cABG) \
			-activeforeground $ConfigSet(cAFG) \
			-disabledforeground $ConfigSet(cDFG) \
			-text "Select the Reverb effect."\
			-selectcolor $ConfigSet(cAFG)\
			-anchor w\
			-variable FX(reverb)\
			-relief groove

   # Create the Done Button
   frame .rev.main.done -bg $ConfigSet(cBG1)\
			  -relief groove\
			  -bd 2
   button .rev.main.done.butt \
			-foreground $ConfigSet(cFG2) \
			-background $ConfigSet(cBG2) \
			-activebackground $ConfigSet(cABG) \
			-activeforeground $ConfigSet(cAFG) \
			-disabledforeground $ConfigSet(cDFG) \
 			-text Done\
			-command {destroy .rev}
   pack .rev.main.done.butt -expand 1 -ipadx 2m -pady 3m

   # Set the focus on the done button.
   focus .rev.main.done.butt

   # Pack into main.
   pack .rev.main.label \
	.rev.main.set\
	.rev.main.set2\
	.rev.main.done\
		-fill both -expand 1 -side top
   pack .rev.main.apply -before .rev.main.done -anchor w -fill x -expand 1\
			  -pady 1m 

   # Pack main.
   pack .rev.main -fill both -expand 1
}

###################################################################
# sEcho15
# This procedure is the callback to the Effect-Echo and 
# a button-3 click on the Echo checkbutton in the effect bar.
# It creates a dialog box to set the parameters for the Echo effect.
# BUGS: It doesn't take full advantage of the effect possibilities
# in Sox, but it creates echos that are of a acceptable duration.
proc sEcho15 {} {
   global ConfigSet FX

   # Create the dialog box.

   # Create toplevel window.
   toplevel .echo -bg $ConfigSet(cBG1)
   wm title .echo "Echo Settings"
   # Set window as a pop-up child of the root window.
   wm transient .echo .
   # Stop entry from the main window. (grab).
   catch { grab .echo }

   # Create Widgets.
   # Create the general frame.	   
   frame .echo.main 	-bg $ConfigSet(cBG1)\
			-bd 2 -relief $ConfigSet(REL)

   # Create the set frame to contain the scale widgets for setting
   # the delay and decay parameters
   frame .echo.main.set -bg $ConfigSet(cBG1)  
   
   # Create the set frame to contain gain sliders
   frame .echo.main.set2 -bg $ConfigSet(cBG1) 

   # Create the delay scale widget.
   frame .echo.main.set.delay -bg $ConfigSet(cBG1)
   label .echo.main.set.delay.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Delay (ms)"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
   entry .echo.main.set.delay.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(ECH15Delay)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .echo.main.set.delay .echo.main.done.butt
		 
   scale .echo.main.set.delay.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0 -to 10000\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(ECH15Delay)"

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(ECH15Delay)]} {  
		if {$FX(ECH15Delay)==""} { set FX(ECH15Delay) 0 }
		.echo.main.set.delay.scale set $FX(ECH15Delay)
   } else {
	set FX(ECH15Delay) [.echo.main.set.delay.scale get]
   }

   pack .echo.main.set.delay.instr 	-fill x -expand 1\
					-anchor w
   pack .echo.main.set.delay.scale\
	.echo.main.set.delay.label \
	  	-side left -fill x -expand 1 

   # Create the decay scale widget.
   frame .echo.main.set.decay -bg $ConfigSet(cBG1)
   label .echo.main.set.decay.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Decay"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
   entry .echo.main.set.decay.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(ECH15Decay)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .echo.main.set.decay .echo.main.done.butt
		 
   scale .echo.main.set.decay.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0 -to 1\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(ECH15Decay)"\
			-resolution 0.01
   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(ECH15Decay)]} { 
	if {$FX(ECH15Decay)==""} { set FX(ECH15Decay) 0 }
	.echo.main.set.decay.scale set $FX(ECH15Decay)
   } else {
	set FX(ECH15Decay) [.echo.main.set.decay.scale get]
   }

   pack .echo.main.set.decay.instr 	-fill x -expand 1\
					-anchor w
   pack .echo.main.set.decay.scale\
	.echo.main.set.decay.label \
	  	-side left -fill x -expand 1
   
   # Create the gainin scale widget. 
   frame .echo.main.set2.gainin -bg $ConfigSet(cBG1)
   label .echo.main.set2.gainin.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Gain of Input Signal"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
   entry .echo.main.set2.gainin.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(ECH15GainIn)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .echo.main.set2.gainin .echo.main2.done.butt
		 
   scale .echo.main.set2.gainin.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0.01 -to 1\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(ECH15GainIn)"\
			-resolution 0.01

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(ECH15GainIn)]} {
		if {$FX(ECH15GainIn)==""} { set FX(ECH15GainIn) 0 }
		.echo.main.set2.gainin.scale set $FX(ECH15GainIn)
   } else {
	set FX(ECH15GainIn) [.echo.main.set2.gainin.scale get]
   }
   pack .echo.main.set2.gainin.instr -fill x -expand 1\
					-anchor w
   pack .echo.main.set2.gainin.scale\
	.echo.main.set2.gainin.label \
	  -side left -fill x -expand 1 
	  
	  
   # Create the gainout scale widget.
 
   frame .echo.main.set2.gainout -bg $ConfigSet(cBG1)

   label .echo.main.set2.gainout.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Gain of Output Signal"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
   entry .echo.main.set2.gainout.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(ECH15GainOut)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .echo.main.set2.gainout .echo.main2.done.butt
		 
   scale .echo.main.set2.gainout.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0.01 -to 1\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(ECH15GainOut)"\
			-resolution 0.01

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(ECH15GainOut)]} {
		if {$FX(ECH15GainOut)==""} { set FX(ECH15GainOut) 0 }
		.echo.main.set2.gainout.scale set $FX(ECH15GainOut)
   } else {
	set FX(ECH15GainOut) [.echo.main.set2.gainout.scale get]
   }
   pack .echo.main.set2.gainout.instr -fill x -expand 1\
					-anchor w
   pack .echo.main.set2.gainout.scale\
	.echo.main.set2.gainout.label\
	  -side left -fill x -expand 1 



   
   # Pack the delay and decay scale widgets.
   pack .echo.main.set.delay\
	.echo.main.set.decay\
		-expand 1 -padx 5m -pady 3m -side left

   pack .echo.main.set2.gainin\
	.echo.main.set2.gainout\
		-expand 1 -padx 5m -pady 3m -side left

   # Create the label for the main window.
   label .echo.main.label  \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Set the Echo Dimentions"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
   # Create the Select checkbutton.
   checkbutton .echo.main.apply \
			-foreground $ConfigSet(cFG2) \
			-background $ConfigSet(cBG2) \
			-activebackground $ConfigSet(cABG) \
			-activeforeground $ConfigSet(cAFG) \
			-disabledforeground $ConfigSet(cDFG) \
			-text "Select the Echo Effect"\
			-selectcolor $ConfigSet(cAFG)\
			-anchor w\
			-variable FX(echo)\
			-relief groove

   # Create the Done button
   frame .echo.main.done -bg $ConfigSet(cBG1)\
			  -relief groove\
			  -bd 2
   button .echo.main.done.butt \
			-foreground $ConfigSet(cFG2) \
			-background $ConfigSet(cBG2) \
			-activebackground $ConfigSet(cABG) \
			-activeforeground $ConfigSet(cAFG) \
			-disabledforeground $ConfigSet(cDFG) \
 			-text Done\
			-command {destroy .echo}
   pack .echo.main.done.butt -expand 1 -ipadx 2m -pady 3m

   # Set the focus on the done button.
   focus .echo.main.done.butt

   # Pack into main.
   pack .echo.main.label \
	.echo.main.set\
	.echo.main.set2\
	.echo.main.done\
	-fill both -expand 1 -side top
   pack .echo.main.apply -before .echo.main.done -anchor w -expand 1 -fill x\
			-pady 1m

   # Pack main.
   pack .echo.main -fill both -expand 1
}
###################################################################
# sFlanger
# This procedure is the callback to the Effects-Flanger menu item and 
# a button-3 click on the Flanger checkbutton in the effect bar.
# It creates a dialog box to set the parameters for the Flanger effect.
proc sFlanger {} {
   global ConfigSet FX

   # Create the dialog box.
	
   # Create toplevel window.
   toplevel .flange -bg $ConfigSet(cBG1)
   wm title .flange "Flanger Settings"
   # Set window as a pop-up child of the root window.
   wm transient .flange .
   # Stop entry from the main window. (grab).
   catch { grab .flange }

   # Create Widgets
   # Create the general frame.	   
   frame .flange.main -bg $ConfigSet(cBG1)\
			-bd 2 -relief $ConfigSet(REL)

   # Create the set frame to contain the scale widgets.
   frame .flange.main.set -bg $ConfigSet(cBG1)
   
   # Create another set frame to contain another scale widget
   frame .flange.main.set2 -bg $ConfigSet(cBG1) 

   # Create another set frame to contain two radiobuttons
   frame .flange.main.set3 -bg $ConfigSet(cBG1)
   
   # Create another set frame to contain gain sliders
   frame .flange.main.set4 -bg $ConfigSet(cBG1)
   
   # Create radio Buttons
   
   set list { "Sinusiodal" "Triangular" } 
   set ButtWidth 10
   foreach item $list {
	set path [string tolower [lindex $item 0]]
	radiobutton .flange.main.set3.$path \
			-foreground $ConfigSet(cFG2) \
			-background $ConfigSet(cBG2) \
			-activebackground $ConfigSet(cABG) \
			-activeforeground $ConfigSet(cAFG) \
			-disabledforeground $ConfigSet(cDFG) \
 			-text $item\
			-width $ButtWidth \
			-selectcolor $ConfigSet(cAFG)\
			-anchor w\
			-variable FX(FlangerSorT)\
			-value $path\
			-relief groove
			
	pack .flange.main.set3.$path -side left -padx 3m -pady 3m\
				-fill x -expand 1
   }

   # Create the delay scale widget. 
   frame .flange.main.set.delay -bg $ConfigSet(cBG1)
   label .flange.main.set.delay.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Flange Delay (ms)"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
   entry .flange.main.set.delay.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(FlangerDelay)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .flange.main.set.delay .flange.main.done.butt
		 
   scale .flange.main.set.delay.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0 -to 5\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(FlangerDelay)"\
			-resolution 0.01

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(FlangerDelay)]} {
		if {$FX(FlangerDelay)==""} { set FX(FlangerDelay) 0 }
		.flange.main.set.delay.scale set $FX(FlangerDelay)
   } else {
	set FX(FlangerDelay) [.flange.main.set.delay.scale get]
   }
   pack .flange.main.set.delay.instr -fill x -expand 1\
					-anchor w
   pack .flange.main.set.delay.scale\
	.flange.main.set.delay.label \
	  -side left -fill x -expand 1 

   # Create the decay scale widget.
   frame .flange.main.set.decay -bg $ConfigSet(cBG1)
   label .flange.main.set.decay.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Flange Decay"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
    entry .flange.main.set.decay.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(FlangerDecay)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .flange.main.set.decay .flange.main.done.butt
		 
   scale .flange.main.set.decay.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0 -to 1\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(FlangerDecay)"\
			-resolution 0.01

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(FlangerDecay)]} { 
		if {$FX(FlangerDecay)==""} { set FX(FlangerDecay) 0 }
		.flange.main.set.decay.scale set $FX(FlangerDecay)
   } else {
	set FX(FlangerDecay) [.flange.main.set.decay.scale get]
   }

   pack .flange.main.set.decay.instr -fill x -expand 1\
					-anchor w
   pack .flange.main.set.decay.scale\
	.flange.main.set.decay.label \
	  -side left -fill x -expand 1
	  
   # Create the speed scale widget. 
   frame .flange.main.set2.speed -bg $ConfigSet(cBG1)
   label .flange.main.set2.speed.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Flange Speed (Hz)"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
   entry .flange.main.set2.speed.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(FlangerSpeed)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .flange.main.set2.speed .flange.main2.done.butt
		 
   scale .flange.main.set2.speed.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0 -to 2\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(FlangerSpeed)"\
			-resolution 0.01

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(FlangerSpeed)]} {
		if {$FX(FlangerSpeed)==""} { set FX(FlangerSpeed) 0 }
		.flange.main.set2.speed.scale set $FX(FlangerSpeed)
   } else {
	set FX(FlangerSpeed) [.flange.main.set2.speed.scale get]
   }
   pack .flange.main.set2.speed.instr -fill x -expand 1\
					-anchor w
   pack .flange.main.set2.speed.scale\
	.flange.main.set2.speed.label \
	  -side left -fill x -expand 1 

  # Create the gainin scale widget. 
   frame .flange.main.set4.gainin -bg $ConfigSet(cBG1)
   label .flange.main.set4.gainin.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Gain of Input Signal"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
   entry .flange.main.set4.gainin.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(FlangerGainIn)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .flange.main.set4.gainin .flange.main2.done.butt
		 
   scale .flange.main.set4.gainin.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0.01 -to 1\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(FlangerGainIn)"\
			-resolution 0.01

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(FlangerGainIn)]} {
		if {$FX(FlangerGainIn)==""} { set FX(FlangerGainIn) 0 }
		.flange.main.set4.gainin.scale set $FX(FlangerGainIn)
   } else {
	set FX(FlangerGainIn) [.flange.main.set4.gainin.scale get]
   }
   pack .flange.main.set4.gainin.instr -fill x -expand 1\
					-anchor w
   pack .flange.main.set4.gainin.scale\
	.flange.main.set4.gainin.label \
	  -side left -fill x -expand 1 
	  
	  
   # Create the gainout scale widget.
 
   frame .flange.main.set4.gainout -bg $ConfigSet(cBG1)

   label .flange.main.set4.gainout.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Gain of Output Signal"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
   entry .flange.main.set4.gainout.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(FlangerGainOut)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .flange.main.set4.gainout .flange.main2.done.butt
		 
   scale .flange.main.set4.gainout.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0.01 -to 1\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(FlangerGainOut)"\
			-resolution 0.01

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(FlangerGainOut)]} {
		if {$FX(FlangerGainOut)==""} { set FX(FlangerGainOut) 0 }
		.flange.main.set4.gainout.scale set $FX(FlangerGainOut)
   } else {
	set FX(FlangerGainOut) [.flange.main.set4.gainout.scale get]
   }
   pack .flange.main.set4.gainout.instr -fill x -expand 1\
					-anchor w
   pack .flange.main.set4.gainout.scale\
	.flange.main.set4.gainout.label\
	  -side left -fill x -expand 1 



   # Pack the scale widgets.
   pack .flange.main.set.delay\
	.flange.main.set.decay\
	-expand 1 -padx 5m -pady 3m -side left
  
   pack .flange.main.set2.speed -expand 1 -padx 5m -pady 3m -side left	
   
   pack .flange.main.set4.gainin\
	.flange.main.set4.gainout\
	-expand 1 -padx 5m -pady 3m -side left
	
   # Create the label for the main window.
   label .flange.main.label  \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Set the Flanger Parameters"\
			-font $ConfigSet(FNT_S) \
 			-anchor w

   # Create the Select checkbutton.
   checkbutton .flange.main.apply \
			-foreground $ConfigSet(cFG2) \
			-background $ConfigSet(cBG2) \
			-activebackground $ConfigSet(cABG) \
			-activeforeground $ConfigSet(cAFG) \
			-disabledforeground $ConfigSet(cDFG) \
			-text "Select the Flanger effect."\
			-selectcolor $ConfigSet(cAFG)\
			-anchor w\
			-variable FX(flanger)\
			-relief groove

   # Create the Done Button
   frame .flange.main.done -bg $ConfigSet(cBG1)\
			  -relief groove\
			  -bd 2
   button .flange.main.done.butt \
			-foreground $ConfigSet(cFG2) \
			-background $ConfigSet(cBG2) \
			-activebackground $ConfigSet(cABG) \
			-activeforeground $ConfigSet(cAFG) \
			-disabledforeground $ConfigSet(cDFG) \
 			-text Done\
			-command {destroy .flange}
   pack .flange.main.done.butt -expand 1 -ipadx 2m -pady 3m

   # Set the focus on the done button.
   focus .flange.main.done.butt

   # Pack into main.
   pack .flange.main.label \
        .flange.main.set3\
	.flange.main.set\
	.flange.main.set2\
	.flange.main.set4\
	.flange.main.done\
		-fill both -expand 1 -side top
   pack .flange.main.apply -before .flange.main.done -anchor w -fill x -expand 1\
			  -pady 1m 

   # Pack main.
   pack .flange.main -fill both -expand 1
}

################################################
# sPhaser
# This procedure is the callback to the Effects-Phaser menu item and 
# a button-3 click on the Phaser checkbutton in the effect bar.
# It creates a dialog box to set the parameters for the Phaser effect.
proc sPhaser {} {
   global ConfigSet FX

   # Create the dialog box.
	
   # Create toplevel window.
   toplevel .phase -bg $ConfigSet(cBG1)
   wm title .phase "Phaser Settings"
   # Set window as a pop-up child of the root window.
   wm transient .phase .
   # Stop entry from the main window. (grab).
   catch { grab .phase }

   # Create Widgets
   # Create the general frame.	   
   frame .phase.main -bg $ConfigSet(cBG1)\
			-bd 2 -relief $ConfigSet(REL)

   # Create the set frame to contain the scale widgets.
   frame .phase.main.set -bg $ConfigSet(cBG1)
   
   # Create another set frame to contain another scale widget
   frame .phase.main.set2 -bg $ConfigSet(cBG1) 

   # Create another set frame to contain two radiobuttons
   frame .phase.main.set3 -bg $ConfigSet(cBG1)
   
   # Create another set frame to contain gain sliders
   frame .phase.main.set4 -bg $ConfigSet(cBG1)
   
   # Create radio Buttons
   
   set list { "Sinusiodal" "Triangular" } 
   set ButtWidth 10
   foreach item $list {
	set path [string tolower [lindex $item 0]]
	radiobutton .phase.main.set3.$path \
			-foreground $ConfigSet(cFG2) \
			-background $ConfigSet(cBG2) \
			-activebackground $ConfigSet(cABG) \
			-activeforeground $ConfigSet(cAFG) \
			-disabledforeground $ConfigSet(cDFG) \
 			-text $item\
			-width $ButtWidth \
			-selectcolor $ConfigSet(cAFG)\
			-anchor w\
			-variable FX(PhaserSorT)\
			-value $path\
			-relief groove
			
	pack .phase.main.set3.$path -side left -padx 3m -pady 3m\
				-fill x -expand 1
   }

   # Create the delay scale widget. 
   frame .phase.main.set.delay -bg $ConfigSet(cBG1)
   label .phase.main.set.delay.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Phase Delay (ms)"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
   entry .phase.main.set.delay.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(PhaserDelay)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .phase.main.set.delay .phase.main.done.butt
		 
   scale .phase.main.set.delay.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0 -to 5\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(PhaserDelay)"\
			-resolution 0.01

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(PhaserDelay)]} {
		if {$FX(PhaserDelay)==""} { set FX(PhaserDelay) 0 }
		.phase.main.set.delay.scale set $FX(PhaserDelay)
   } else {
	set FX(FPhaserDelay) [.phase.main.set.delay.scale get]
   }
   pack .phase.main.set.delay.instr -fill x -expand 1\
					-anchor w
   pack .phase.main.set.delay.scale\
	.phase.main.set.delay.label \
	  -side left -fill x -expand 1 

   # Create the decay scale widget.
   frame .phase.main.set.decay -bg $ConfigSet(cBG1)
   label .phase.main.set.decay.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Phase Decay"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
    entry .phase.main.set.decay.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(PhaserDecay)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .phase.main.set.decay .phase.main.done.butt
		 
   scale .phase.main.set.decay.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0 -to 1\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(PhaserDecay)"\
			-resolution 0.01

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(PhaserDecay)]} { 
		if {$FX(PhaserDecay)==""} { set FX(PhaserDecay) 0 }
		.phase.main.set.decay.scale set $FX(PhaserDecay)
   } else {
	set FX(PhaserDecay) [.phase.main.set.decay.scale get]
   }

   pack .phase.main.set.decay.instr -fill x -expand 1\
					-anchor w
   pack .phase.main.set.decay.scale\
	.phase.main.set.decay.label \
	  -side left -fill x -expand 1
	  
   # Create the speed scale widget. 
   frame .phase.main.set2.speed -bg $ConfigSet(cBG1)
   label .phase.main.set2.speed.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Phaser Speed (Hz)"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
   entry .phase.main.set2.speed.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(PhaserSpeed)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .phase.main.set2.speed .phase.main2.done.butt
		 
   scale .phase.main.set2.speed.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0 -to 2\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(PhaserSpeed)"\
			-resolution 0.01

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(PhaserSpeed)]} {
		if {$FX(PhaserSpeed)==""} { set FX(PhaserSpeed) 0 }
		.phase.main.set2.speed.scale set $FX(PhaserSpeed)
   } else {
	set FX(PhaserSpeed) [.phase.main.set2.speed.scale get]
   }
   pack .phase.main.set2.speed.instr -fill x -expand 1\
					-anchor w
   pack .phase.main.set2.speed.scale\
	.phase.main.set2.speed.label \
	  -side left -fill x -expand 1 
	  
# Create the gainin scale widget. 
   frame .phase.main.set4.gainin -bg $ConfigSet(cBG1)
   label .phase.main.set4.gainin.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Gain of Input Signal"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
   entry .phase.main.set4.gainin.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(PhaserGainIn)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .phase.main.set4.gainin .phase.main2.done.butt
		 
   scale .phase.main.set4.gainin.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0.01 -to 1\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(PhaserGainIn)"\
			-resolution 0.01

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(PhaserGainIn)]} {
		if {$FX(PhaserGainIn)==""} { set FX(PhaserGainIn) 0 }
		.phase.main.set4.gainin.scale set $FX(PhaserGainIn)
   } else {
	set FX(PhaserGainIn) [.phase.main.set4.gainin.scale get]
   }
   pack .phase.main.set4.gainin.instr -fill x -expand 1\
					-anchor w
   pack .phase.main.set4.gainin.scale\
	.phase.main.set4.gainin.label \
	  -side left -fill x -expand 1 
	  
	  
   # Create the gainout scale widget.
 
   frame .phase.main.set4.gainout -bg $ConfigSet(cBG1)

   label .phase.main.set4.gainout.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Gain of Output Signal"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
   entry .phase.main.set4.gainout.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(PhaserGainOut)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .phase.main.set4.gainout .phase.main2.done.butt
		 
   scale .phase.main.set4.gainout.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0.01 -to 1\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(PhaserGainOut)"\
			-resolution 0.01

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(PhaserGainOut)]} {
		if {$FX(PhaserGainOut)==""} { set FX(PhaserGainOut) 0 }
		.phase.main.set4.gainout.scale set $FX(PhaserGainOut)
   } else {
	set FX(PhaserGainOut) [.phase.main.set4.gainout.scale get]
   }
   pack .phase.main.set4.gainout.instr -fill x -expand 1\
					-anchor w
   pack .phase.main.set4.gainout.scale\
	.phase.main.set4.gainout.label\
	  -side left -fill x -expand 1 



 
   # Pack the scale widgets.
   pack .phase.main.set.delay\
	.phase.main.set.decay\
	-expand 1 -padx 5m -pady 3m -side left
  
   pack .phase.main.set2.speed -expand 1 -padx 5m -pady 3m -side left	
   
   pack .phase.main.set4.gainin\
	.phase.main.set4.gainout\
	-expand 1 -padx 5m -pady 3m -side left
   

   # Create the label for the main window.
   label .phase.main.label  \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Set the Phaser Parameters"\
			-font $ConfigSet(FNT_S) \
 			-anchor w

   # Create the Select checkbutton.
   checkbutton .phase.main.apply \
			-foreground $ConfigSet(cFG2) \
			-background $ConfigSet(cBG2) \
			-activebackground $ConfigSet(cABG) \
			-activeforeground $ConfigSet(cAFG) \
			-disabledforeground $ConfigSet(cDFG) \
			-text "Select the Phaser effect."\
			-selectcolor $ConfigSet(cAFG)\
			-anchor w\
			-variable FX(phaser)\
			-relief groove

   # Create the Done Button
   frame .phase.main.done -bg $ConfigSet(cBG1)\
			  -relief groove\
			  -bd 2
   button .phase.main.done.butt \
			-foreground $ConfigSet(cFG2) \
			-background $ConfigSet(cBG2) \
			-activebackground $ConfigSet(cABG) \
			-activeforeground $ConfigSet(cAFG) \
			-disabledforeground $ConfigSet(cDFG) \
 			-text Done\
			-command {destroy .phase}
   pack .phase.main.done.butt -expand 1 -ipadx 2m -pady 3m

   # Set the focus on the done button.
   focus .phase.main.done.butt

   # Pack into main.
   pack .phase.main.label \
        .phase.main.set3\
	.phase.main.set\
	.phase.main.set2\
	.phase.main.set4\
	.phase.main.done\
		-fill both -expand 1 -side top
   pack .phase.main.apply -before .phase.main.done -anchor w -fill x -expand 1\
			  -pady 1m 

   # Pack main.
   pack .phase.main -fill both -expand 1
}

###################################################################
# sChorus
# This procedure is the callback to the Effects-Chorus menu item and 
# a button-3 click on the Chorus checkbutton in the effect bar.
# It creates a dialog box to set the parameters for the Chorus effect.
proc sChorus {} {
   global ConfigSet FX

   # Create the dialog box.
	
   # Create toplevel window.
   toplevel .chorus -bg $ConfigSet(cBG1)
   wm title .chorus "Chorus Settings"
   # Set window as a pop-up child of the root window.
   wm transient .chorus .
   # Stop entry from the main window. (grab).
   catch { grab .chorus }

   # Create Widgets
   # Create the general frame.	   
   frame .chorus.main -bg $ConfigSet(cBG1)\
			-bd 2 -relief $ConfigSet(REL)

   # Create the set frame to contain the scale widgets.
   frame .chorus.main.set -bg $ConfigSet(cBG1)
   
   # Create another set frame to contain another scale widget
   frame .chorus.main.set2 -bg $ConfigSet(cBG1) 

   # Create another set frame to contain two radiobuttons
   frame .chorus.main.set3 -bg $ConfigSet(cBG1)
   
   # Create another set frame to contain gain sliders
   frame .chorus.main.set4 -bg $ConfigSet(cBG1)
   
   # Create radio Buttons
   
   set list { "Sinusiodal" "Triangular" } 
   set ButtWidth 10
   foreach item $list {
	set path [string tolower [lindex $item 0]]
	radiobutton .chorus.main.set3.$path \
			-foreground $ConfigSet(cFG2) \
			-background $ConfigSet(cBG2) \
			-activebackground $ConfigSet(cABG) \
			-activeforeground $ConfigSet(cAFG) \
			-disabledforeground $ConfigSet(cDFG) \
 			-text $item\
			-width $ButtWidth \
			-selectcolor $ConfigSet(cAFG)\
			-anchor w\
			-variable FX(ChorusSorT)\
			-value $path\
			-relief groove
			
	pack .chorus.main.set3.$path -side left -padx 3m -pady 3m\
				-fill x -expand 1
   }

   # Create the delay scale widget. 
   frame .chorus.main.set.delay -bg $ConfigSet(cBG1)
   label .chorus.main.set.delay.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Chrous Delay (ms)"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
   entry .chorus.main.set.delay.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(ChorusDelay)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .chorus.main.set.delay .chorus.main.done.butt
		 
   scale .chorus.main.set.delay.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 20 -to 100\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(ChorusDelay)"\
			-resolution 0.1

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(ChorusDelay)]} {
		if {$FX(ChorusDelay)==""} { set FX(ChorusDelay) 0 }
		.chorus.main.set.delay.scale set $FX(ChorusDelay)
   } else {
	set FX(FChorusDelay) [.chorus.main.set.delay.scale get]
   }
   pack .chorus.main.set.delay.instr -fill x -expand 1\
					-anchor w
   pack .chorus.main.set.delay.scale\
	.chorus.main.set.delay.label \
	  -side left -fill x -expand 1 

   # Create the decay scale widget.
   frame .chorus.main.set.decay -bg $ConfigSet(cBG1)
   label .chorus.main.set.decay.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Chorus Decay"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
    entry .chorus.main.set.decay.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(ChorusDecay)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .chorus.main.set.decay .chorus.main.done.butt
		 
   scale .chorus.main.set.decay.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0 -to 1\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(ChorusDecay)"\
			-resolution 0.01

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(ChorusDecay)]} { 
		if {$FX(ChorusDecay)==""} { set FX(ChorusDecay) 0 }
		.chorus.main.set.decay.scale set $FX(ChorusDecay)
   } else {
	set FX(ChorusDecay) [.chorus.main.set.decay.scale get]
   }

   pack .chorus.main.set.decay.instr -fill x -expand 1\
					-anchor w
   pack .chorus.main.set.decay.scale\
	.chorus.main.set.decay.label \
	  -side left -fill x -expand 1
	  
   # Create the speed scale widget. 
   frame .chorus.main.set2.speed -bg $ConfigSet(cBG1)
   label .chorus.main.set2.speed.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Chorus Speed (Hz)"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
   entry .chorus.main.set2.speed.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(ChorusSpeed)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .chorus.main.set2.speed .chorus.main2.done.butt
		 
   scale .chorus.main.set2.speed.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0 -to 5\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(ChorusSpeed)"\
			-resolution 0.01

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(ChorusSpeed)]} {
		if {$FX(ChorusSpeed)==""} { set FX(ChorusSpeed) 0 }
		.chorus.main.set2.speed.scale set $FX(ChorusSpeed)
   } else {
	set FX(ChorusSpeed) [.chorus.main.set2.speed.scale get]
   }
   pack .chorus.main.set2.speed.instr -fill x -expand 1\
					-anchor w
   pack .chorus.main.set2.speed.scale\
	.chorus.main.set2.speed.label \
	  -side left -fill x -expand 1 
	  
	  
   # Create the depth scale widget.
 
   frame .chorus.main.set2.depth -bg $ConfigSet(cBG1)

   label .chorus.main.set2.depth.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Chorus Depth"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
   entry .chorus.main.set2.depth.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(ChorusDepth)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .chorus.main.set2.depth .chorus.main2.done.butt
		 
   scale .chorus.main.set2.depth.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0 -to 10\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(ChorusDepth)"\
			-resolution 0.01

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(ChorusDepth)]} {
		if {$FX(ChorusDepth)==""} { set FX(ChorusDepth) 0 }
		.chorus.main.set2.depth.scale set $FX(ChorusDepth)
   } else {
	set FX(ChorusDepth) [.chorus.main.set2.depth.scale get]
   }
   pack .chorus.main.set2.depth.instr -fill x -expand 1\
					-anchor w
   pack .chorus.main.set2.depth.scale\
	.chorus.main.set2.depth.label\
	  -side left -fill x -expand 1 
	  
 # Create the gainin scale widget. 
   frame .chorus.main.set4.gainin -bg $ConfigSet(cBG1)
   label .chorus.main.set4.gainin.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Gain of Input Signal"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
   entry .chorus.main.set4.gainin.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(ChorusGainIn)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .chorus.main.set4.gainin .chorus.main2.done.butt
		 
   scale .chorus.main.set4.gainin.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0.01 -to 1\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(ChorusGainIn)"\
			-resolution 0.01

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(ChorusGainIn)]} {
		if {$FX(ChorusGainIn)==""} { set FX(ChorusGainIn) 0 }
		.chorus.main.set4.gainin.scale set $FX(ChorusGainIn)
   } else {
	set FX(ChorusGainIn) [.chorus.main.set4.gainin.scale get]
   }
   pack .chorus.main.set4.gainin.instr -fill x -expand 1\
					-anchor w
   pack .chorus.main.set4.gainin.scale\
	.chorus.main.set4.gainin.label \
	  -side left -fill x -expand 1 
	  
	  
   # Create the gainout scale widget.
 
   frame .chorus.main.set4.gainout -bg $ConfigSet(cBG1)

   label .chorus.main.set4.gainout.instr \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Gain of Output Signal"\
			-font $ConfigSet(FNT_S) \
 			-anchor w
   entry .chorus.main.set4.gainout.label \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-textvariable "FX(ChorusGainOut)"\
			-font $ConfigSet(FNT_S) \
			-width 5\
			-insertbackground $ConfigSet(cFG1)\
			-selectforeground $ConfigSet(cAFG)\
			-selectbackground $ConfigSet(cABG)\
			-cursor arrow
   # Bind the entry with special characteristics.
   bindScale .chorus.main.set4.gainout .chorus.main2.done.butt
		 
   scale .chorus.main.set4.gainout.scale\
			-showvalue 0\
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-activebackground $ConfigSet(cABG)\
			-from 0.01 -to 1\
			-width 10 -length 100\
			-orient horizontal\
			-command "set FX(ChorusGainOut)"\
			-resolution 0.01

   # Make sure that the value is being displayed and the scale slider
   # is in the correct position.
   if {[info exist FX(ChorusGainOut)]} {
		if {$FX(ChorusGainOut)==""} { set FX(ChorusGainOut) 0 }
		.chorus.main.set4.gainout.scale set $FX(ChorusGainOut)
   } else {
	set FX(ChorusGainOut) [.chorus.main.set4.gainout.scale get]
   }
   pack .chorus.main.set4.gainout.instr -fill x -expand 1\
					-anchor w
   pack .chorus.main.set4.gainout.scale\
	.chorus.main.set4.gainout.label\
	  -side left -fill x -expand 1 




	  
   # Pack the scale widgets.
   pack .chorus.main.set.delay\
	.chorus.main.set.decay\
	-expand 1 -padx 5m -pady 3m -side left
  
   pack .chorus.main.set2.speed\
        .chorus.main.set2.depth -expand 1 -padx 5m -pady 3m -side left	
   
   pack .chorus.main.set4.gainin\
        .chorus.main.set4.gainout -expand 1 -padx 5m -pady 3m -side left	    
    

   # Create the label for the main window.
   label .chorus.main.label  \
			-bg $ConfigSet(cBG1)\
			-fg $ConfigSet(cFG1)\
			-text "Set the Chorus Parameters"\
			-font $ConfigSet(FNT_S) \
 			-anchor w

   # Create the Select checkbutton.
   checkbutton .chorus.main.apply \
			-foreground $ConfigSet(cFG2) \
			-background $ConfigSet(cBG2) \
			-activebackground $ConfigSet(cABG) \
			-activeforeground $ConfigSet(cAFG) \
			-disabledforeground $ConfigSet(cDFG) \
			-text "Select the Chorus effect."\
			-selectcolor $ConfigSet(cAFG)\
			-anchor w\
			-variable FX(chorus)\
			-relief groove

   # Create the Done Button
   frame .chorus.main.done -bg $ConfigSet(cBG1)\
			  -relief groove\
			  -bd 2
   button .chorus.main.done.butt \
			-foreground $ConfigSet(cFG2) \
			-background $ConfigSet(cBG2) \
			-activebackground $ConfigSet(cABG) \
			-activeforeground $ConfigSet(cAFG) \
			-disabledforeground $ConfigSet(cDFG) \
 			-text Done\
			-command {destroy .chorus}
   pack .chorus.main.done.butt -expand 1 -ipadx 2m -pady 3m

   # Set the focus on the done button.
   focus .chorus.main.done.butt

   # Pack into main.
   pack .chorus.main.label \
        .chorus.main.set3\
	.chorus.main.set\
	.chorus.main.set2\
	.chorus.main.set4\
	.chorus.main.done\
		-fill both -expand 1 -side top
   pack .chorus.main.apply -before .chorus.main.done -anchor w -fill x -expand 1\
			  -pady 1m 

   # Pack main.
   pack .chorus.main -fill both -expand 1
}

